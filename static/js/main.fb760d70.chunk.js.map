{"version":3,"sources":["components/AddNote/AddNote.jsx","constants/MainCostants.js","components/AddNoteForm/AddNoteForm.jsx","components/Note/Note.jsx","components/NoteList/NoteList.jsx","context/NoteActions.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","context/NoteReducer.js","index.js"],"names":["AddNote","className","size","Backend","ROUTES","addNoteUrl","API_URL","AddNoteForm","noteTitle","useRef","noteBody","ref","type","placeholder","id","cols","rows","onClick","console","log","current","value","newNote","title","body","footer","axios","post","then","res","window","location","reload","catch","err","handleSubmit","Note","mapDispatchToProps","getNotes","payload","connect","state","notes","props","useEffect","a","get","data","map","note","_id","App","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","NoteReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fb760d70.chunk.js","sourcesContent":["import React from 'react'\nimport {IoMdAddCircleOutline} from 'react-icons/io'\nimport './addNoteStyles.scss'\n\nconst AddNote = () => {\n    return (\n        <div className=\"add-note\">\n            <IoMdAddCircleOutline size={64} />\n        </div>\n    )\n}\n\nexport default AddNote\n","export class Backend {\n\tstatic ROUTES = {\n\t\taddNoteUrl: \"note\",\n\t};\n\n\tstatic API_URL = \"https://young-escarpment-43192.herokuapp.com/\";\n}","import axios from 'axios';\nimport React, {useRef} from 'react'\nimport {Backend} from '../../constants/MainCostants'\n\nconst AddNoteForm = () => {\n    const noteTitle = useRef(null)\n    const noteBody = useRef(null);\n    \n    const handleSubmit = () => {\n        console.log(noteTitle.current.value, noteBody.current.value);\n        const newNote = {\n\t\t\t\t\ttitle: noteTitle.current.value,\n\t\t\t\t\tbody: noteBody.current.value,\n                    footer: 'chatuzPark'\n\t\t\t\t};\n        axios.post(Backend.API_URL+Backend.ROUTES.addNoteUrl, newNote)\n            .then(res => window.location.reload())\n            .catch(err => console.log(err))\n    }\n\n    return (\n\t\t\t<div>\n\t\t\t\t<input ref={noteTitle} type=\"text\" placeholder=\"note title\" />\n\t\t\t\t<textarea ref={noteBody} id=\"\" cols=\"30\" rows=\"10\"></textarea>\n\t\t\t\t<button onClick={() => handleSubmit()}>crear nota!</button>\n\t\t\t</div>\n\t\t);\n}\n\nexport default AddNoteForm\n","import React from 'react'\nimport './noteStyle.scss'\nimport {BiEdit} from 'react-icons/bi'\nimport { FiTrash2 } from \"react-icons/fi\";\n\nconst Note = ({title, body}) => {\n    return (\n        <div className=\"note bg-normal\">\n            <BiEdit className=\"edit-icon\" size={24} />\n            <FiTrash2 className=\"trash-icon\" size={22} />\n            <h2>{title}</h2>\n            <p>{body}</p>\n        </div>\n    )\n}\n\nexport default Note\n","import axios from 'axios'\nimport React, {useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport {getNotes} from '../../context/NoteActions'\nimport AddNote from '../AddNote/AddNote'\nimport AddNoteForm from '../AddNoteForm/AddNoteForm'\nimport Note from '../Note/Note'\nimport './noteListStyle.scss'\nimport {Backend} from '../../constants/MainCostants'\n\nconst NoteList = (props) => {\n    const {notes} = props\n    useEffect(async () => {\n        const res = await axios.get(Backend.API_URL);\n        // setNoteState(res.data)\n        props.getNotes([...res.data])\n    }, [])\n    console.log(notes)\n    return (\n        <div className=\"note-list\">\n            {notes.map(note => {\n                return (\n                    <Note key={note._id} {...note} />\n                )\n            })}\n            <AddNoteForm />\n            <AddNote />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = {\n    getNotes\n}\n\nconst mapStateToProps = state => {\n    return {\n        notes: state.notes\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteList)","export const getNotes = payload => ({\n    type: 'GET_NOTES',\n    payload\n})","import React from 'react';\nimport './App.css';\nimport NoteList from './components/NoteList/NoteList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NoteList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const NoteReducer = (state, action) => {\n    switch (action.type){\n        case 'GET_NOTES':\n            return {\n                ...state,\n                notes: action.payload\n            }\n\n        case 'GET_NOTE':\n            return {\n                ...state,\n                note: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default NoteReducer\n\n// export default function (state, action) {\n//     const {payload, action} = action\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport NoteReducer from './context/NoteReducer'\n\nimport {Provider} from 'react-redux'\nimport { createStore } from \"redux\";\n\nconst initialState = {\n\tnotes: [],\n\tnote: {},\n};\n\nconst store = createStore(NoteReducer, initialState);\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}